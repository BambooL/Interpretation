static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
static int kdb_bt1 ( struct task_struct * p , unsigned long mask , int argcount , int btaprompt )
{
	char buffer [ 2 ];
	if ( kdb_getarea ( buffer [ 0 ] , ( unsigned long ) p ) ||
	 kdb_getarea ( buffer[0] , ( unsigned long ) ( p+1 ) -1 ) )
		return KDB_BADADDR ;
	if ( ! kdb_task_state ( p , mask ) )
		return 0 ;
	kdb_printf ( " Stack traceback for pid %d\n " , p -> pid ) ;
	kdb_ps1 ( p ) ;
	kdb_show_stack ( p , NULL ) ;
	if ( btaprompt ) {
		kdb_getstr ( buffer, sizeof ( buffer ) ,
			 " Enter < q > to end, < cr > to continue: " ) ;
		if ( buffer [ 0 ] == 'q' ) {
			kdb_printf ( " \n " ) ;
			return 1 ;
		}
	}
	touch_nmi_watchdog ( ) ;
	return 0 ;
}
